trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  azureSubscription: 'Prueba'
  location: 'eastus2'
  resourceGroupName: 'Prueba'
  virtualNetworkName: 'VNet-taller-DevOps'
  subnetName: 'Subnet-taller-DevOps'
  addressPrefix: '10.0.0.0/16'
  subnetPrefix: '10.0.1.0/24'
  securityGroupName: 'NSG-taller-DevOps'
  publicIpName: 'PublicIP-2-taller-DevOps'
  vmName: 'VM-2-taller-DevOps'
  vmSize: 'Standard_B1s'
  adminUsername: 'azureuser'
  adminPassword: 'Password1234$'

  imagePublisher: 'Canonical'
  imageOffer: '0001-com-ubuntu-server-jammy'
  imageSku: '22_04-lts-gen2'
  imageVersion: 'latest'

steps:
# ----------------------------
# 1️⃣ Provisionar VM con Apache
# ----------------------------
- task: AzureCLI@2
  inputs:
    azureSubscription: $(azureSubscription)
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      set -e

      echo "Creando grupo de recursos..."
      az group create --name $(resourceGroupName) --location "$(location)"

      echo "Creando red virtual..."
      az network vnet create --resource-group $(resourceGroupName) --name $(virtualNetworkName) --address-prefix $(addressPrefix) --subnet-name $(subnetName) --subnet-prefix $(subnetPrefix)

      echo "Creando grupo de seguridad de red..."
      az network nsg create --resource-group $(resourceGroupName) --name $(securityGroupName)

      echo "Configurando reglas de NSG..."
      az network nsg rule create --resource-group $(resourceGroupName) --nsg-name $(securityGroupName) --name AllowSSH --protocol tcp --direction inbound --priority 1000 --source-address-prefix '*' --source-port-range '*' --destination-address-prefix '*' --destination-port-range 22 --access allow
      az network nsg rule create --resource-group $(resourceGroupName) --nsg-name $(securityGroupName) --name AllowHTTP --protocol tcp --direction inbound --priority 1001 --source-address-prefix '*' --source-port-range '*' --destination-address-prefix '*' --destination-port-range 80 --access allow
      az network nsg rule create --resource-group $(resourceGroupName) --nsg-name $(securityGroupName) --name AllowICMP --protocol icmp --direction inbound --priority 1002 --source-address-prefix '*' --source-port-range '*' --destination-address-prefix '*' --destination-port-range '*' --access allow

      echo "Creando IP pública..."
      az network public-ip create --resource-group $(resourceGroupName) --name $(publicIpName) --sku Standard --allocation-method Static

      echo "Creando la máquina virtual..."
      az vm create --resource-group $(resourceGroupName) --name $(vmName) --image $(imagePublisher):$(imageOffer):$(imageSku):$(imageVersion) --size $(vmSize) --admin-username $(adminUsername) --admin-password $(adminPassword) --vnet-name $(virtualNetworkName) --subnet $(subnetName) --nsg $(securityGroupName) --public-ip-address $(publicIpName)

      echo "Instalando Apache..."
      az vm run-command invoke --resource-group $(resourceGroupName) --name $(vmName) --command-id RunShellScript --scripts "sudo apt update && sudo apt install -y apache2"

# ----------------------------
# 2️⃣ Build Angular
# ----------------------------
- task: NodeTool@0
  inputs:
    versionSpec: '16.x'
  displayName: 'Install Node.js'

- script: |
    npm install -g @angular/cli
    npm install
    ng build 
  displayName: 'Build Angular'

- task: ArchiveFiles@2
  displayName: 'Archive dist/frontned'
  inputs:
    rootFolderOrFile: '$(System.DefaultWorkingDirectory)/dist/frontned'
    includeRootFolder: false
    archiveType: zip
    archiveFile: $(Build.ArtifactStagingDirectory)/frontend.zip
    replaceExistingArchive: true

- upload: $(Build.ArtifactStagingDirectory)/frontend.zip
  artifact: "frontend"

# ----------------------------
# 3️⃣ Copiar build a VM
# ----------------------------
- task: AzureCLI@2
  inputs:
    azureSubscription: $(azureSubscription)
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      echo "Descargando artefacto desde el pipeline..."
      # Nota: en producción podrías usar Release Pipeline para desplegar artefactos
      # Aquí asumimos que ya tienes frontend.zip descargado en $(Pipeline.Workspace)

      # Descomprimir y copiar a la VM
      az vm run-command invoke --resource-group $(resourceGroupName) --name $(vmName) --command-id RunShellScript --scripts "
        sudo rm -rf /var/www/html/*
        sudo unzip /home/azureuser/frontend.zip -d /var/www/html/
        sudo chown -R www-data:www-data /var/www/html/
        sudo chmod -R 755 /var/www/html/
      "
