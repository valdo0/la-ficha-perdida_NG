trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  azureSubscription: 'Prueba'
  location: 'eastus2'
  resourceGroupName: 'Prueba'
  virtualNetworkName: 'VNet-taller-DevOps'
  subnetName: 'Subnet-taller-DevOps'
  addressPrefix: '10.0.0.0/16'
  subnetPrefix: '10.0.1.0/24'
  securityGroupName: 'NSG-taller-DevOps'
  publicIpName: 'PublicIP-2-taller-DevOps'
  vmName: 'VM-2-taller-DevOps'
  vmSize: 'Standard_B1s'
  adminUsername: 'azureuser'
  adminPassword: 'Password1234$'

  imagePublisher: 'Canonical'
  imageOffer: '0001-com-ubuntu-server-jammy'
  imageSku: '22_04-lts-gen2'
  imageVersion: 'latest'

  repoUrl: 'https://github.com/tu_usuario/tu_repositorio.git'
  branch: 'main'

steps:
# ----------------------------
# 1️⃣ Provisionar VM con Apache y Node.js
# ----------------------------
- task: AzureCLI@2
  inputs:
    azureSubscription: $(azureSubscription)
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      set -e

      echo "Creando grupo de recursos..."
      az group create --name $(resourceGroupName) --location "$(location)"

      echo "Creando red virtual..."
      az network vnet create --resource-group $(resourceGroupName) --name $(virtualNetworkName) --address-prefix $(addressPrefix) --subnet-name $(subnetName) --subnet-prefix $(subnetPrefix)

      echo "Creando grupo de seguridad de red..."
      az network nsg create --resource-group $(resourceGroupName) --name $(securityGroupName)

      echo "Configurando reglas de NSG..."
      az network nsg rule create --resource-group $(resourceGroupName) --nsg-name $(securityGroupName) --name AllowSSH --protocol tcp --direction inbound --priority 1000 --source-address-prefix '*' --source-port-range '*' --destination-address-prefix '*' --destination-port-range 22 --access allow
      az network nsg rule create --resource-group $(resourceGroupName) --nsg-name $(securityGroupName) --name AllowHTTP --protocol tcp --direction inbound --priority 1001 --source-address-prefix '*' --source-port-range '*' --destination-address-prefix '*' --destination-port-range 80 --access allow
      az network nsg rule create --resource-group $(resourceGroupName) --nsg-name $(securityGroupName) --name AllowICMP --protocol icmp --direction inbound --priority 1002 --source-address-prefix '*' --source-port-range '*' --destination-address-prefix '*' --destination-port-range '*' --access allow

      echo "Creando IP pública..."
      az network public-ip create --resource-group $(resourceGroupName) --name $(publicIpName) --sku Standard --allocation-method Static

      echo "Creando la máquina virtual..."
      az vm create \
        --resource-group $(resourceGroupName) \
        --name $(vmName) \
        --image $(imagePublisher):$(imageOffer):$(imageSku):$(imageVersion) \
        --size $(vmSize) \
        --admin-username $(adminUsername) \
        --admin-password $(adminPassword) \
        --vnet-name $(virtualNetworkName) \
        --subnet $(subnetName) \
        --nsg $(securityGroupName) \
        --public-ip-address $(publicIpName)

      echo "Instalando Apache, Node.js, git y unzip..."
      az vm run-command invoke --resource-group $(resourceGroupName) --name $(vmName) --command-id RunShellScript --scripts "
        sudo apt update
        sudo apt install -y apache2 git unzip curl
        curl -fsSL https://deb.nodesource.com/setup_17.x | sudo -E bash -
        sudo apt install -y nodejs
      "

# ----------------------------
# 2️⃣ Clonar repositorio y build Angular dentro de la VM
# ----------------------------
- task: AzureCLI@2
  inputs:
    azureSubscription: $(azureSubscription)
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      echo "Clonando repositorio y haciendo build en la VM..."
      az vm run-command invoke --resource-group $(resourceGroupName) --name $(vmName) --command-id RunShellScript --scripts "
        # Variables de usuario
        REPO='$(repoUrl)'
        BRANCH='$(branch)'
        APP_DIR='/home/$(adminUsername)/app'

        # Clonar o actualizar repo
        if [ -d \$APP_DIR ]; then
          cd \$APP_DIR
          git reset --hard
          git pull origin \$BRANCH
        else
          git clone -b \$BRANCH \$REPO \$APP_DIR
          cd \$APP_DIR
        fi

        # Build Angular
        npm install
        npm run build

        # Copiar build a Apache
        sudo rm -rf /var/www/html/*
        sudo cp -r dist/* /var/www/html/
        sudo chown -R www-data:www-data /var/www/html/
        sudo chmod -R 755 /var/www/html/

        # Reiniciar Apache
        sudo systemctl restart apache2
      "
